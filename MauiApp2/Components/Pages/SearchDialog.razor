@using FluentValidation

<MudDialog>
    <DialogContent>

		<MudCard>
			<MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
				<MudCardContent>

                    <MudSelect @bind-Value="stringValue" Label="Select fast-food" HelperText="String" Placeholder="Please Select" AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary">
                        @foreach (var item in jsonData.lists.departures.departure)
                        {
                            <MudSelectItem Value="@((int)(item.id))">@item.name</MudSelectItem>
                        }
                       
                    </MudSelect>
                    

					<MudTextField @bind-Value="model.Name"
								  For="@(() => model.Name)"
								  Immediate="true"
								  Label="Name" />

					<MudTextField @bind-Value="model.Email"
								  For="@(() => model.Email)"
								  Immediate="true"
								  Label="Email" />

					<MudTextField @bind-Value="model.CCNumber"
								  For="@(() => model.CCNumber)"
								  Immediate="true"
								  Label="Credit card nr" />

					<MudTextField @bind-Value="model.Address.Address"
								  For="@(() => model.Address.Address)"
								  Immediate="true"
								  Label="Address" />

					<MudTextField @bind-Value="model.Address.City"
								  For="@(() => model.Address.City)"
								  Immediate="true"
								  Label="City" />

					<MudTextField @bind-Value="model.Address.Country"
								  For="@(() => model.Address.Country)"
								  Immediate="true"
								  Label="Country" />
				</MudCardContent>
			</MudForm>
			<MudCardActions>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Order</MudButton>
			</MudCardActions>
		</MudCard>
	</DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    //void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private string stringValue { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    MudForm form;

    OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();

    OrderModel model = new OrderModel();

    public class OrderModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string CCNumber { get; set; } = "4012 8888 8888 1881";
        public AddressModel Address { get; set; } = new AddressModel();
        public List<OrderDetailsModel> OrderDetails = new List<OrderDetailsModel>()
        {
            new OrderDetailsModel()
                {
                    Description = "Perform Work order 1",
                    Offer = 100
                },
            new OrderDetailsModel()
        };
    }

    public class AddressModel
    {
        public string Address { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }

    public class OrderDetailsModel
    {
        public string Description { get; set; }
        public decimal Offer { get; set; }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add("Submited!");
        }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="OrderModel"></typeparam>
    public class OrderModelFluentValidator : AbstractValidator<OrderModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .EmailAddress()
                .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));

            RuleFor(x => x.CCNumber)
                .NotEmpty()
                .Length(1, 100)
                .CreditCard();

            RuleFor(x => x.Address.Address)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Address.City)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Address.Country)
                .NotEmpty()
                .Length(1, 100);
        }

        private async Task<bool> IsUniqueAsync(string email)
        {
            // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != "test@test.com";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderModel>.CreateWithOptions((OrderModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
    private dynamic? jsonData = null;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var httpClient = new HttpClient();
            var response = await httpClient.GetAsync("https://tourvisor.ru/xml/listdev.php?type=departure,allcountry,country,region,subregions,operator&cndep=59&flydeparture=59&flycountry=0&format=json&referrer=https%3A%2F%2Fgolden-travel.kz%2F");
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            jsonData = JsonConvert.DeserializeObject(jsonString);
            var a = jsonData;
        }
        catch (Exception e)
        {
            //TODO: А хуй тебе а не карточки
        }

    }
}

}